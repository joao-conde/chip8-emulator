const testRom: number[] = [
    0x22, 0xfc, 0x6b, 0x0c, 0x6c, 0x3f, 0x6d, 0x0c, 0xa2, 0xea, 0xda, 0xb6, 0xdc, 0xd6, 0x6e, 0x00,
    0x22, 0xd4, 0x66, 0x03, 0x68, 0x02, 0x60, 0x60, 0xf0, 0x15, 0xf0, 0x07, 0x30, 0x00, 0x12, 0x1a,
    0xc7, 0x17, 0x77, 0x08, 0x69, 0xff, 0xa2, 0xf0, 0xd6, 0x71, 0xa2, 0xea, 0xda, 0xb6, 0xdc, 0xd6,
    0x60, 0x01, 0xe0, 0xa1, 0x7b, 0xfe, 0x60, 0x04, 0xe0, 0xa1, 0x7b, 0x02, 0x60, 0x1f, 0x8b, 0x02,
    0xda, 0xb6, 0x60, 0x0c, 0xe0, 0xa1, 0x7d, 0xfe, 0x60, 0x0d, 0xe0, 0xa1, 0x7d, 0x02, 0x60, 0x1f,
    0x8d, 0x02, 0xdc, 0xd6, 0xa2, 0xf0, 0xd6, 0x71, 0x86, 0x84, 0x87, 0x94, 0x60, 0x3f, 0x86, 0x02,
    0x61, 0x1f, 0x87, 0x12, 0x46, 0x00, 0x12, 0x78, 0x46, 0x3f, 0x12, 0x82, 0x47, 0x1f, 0x69, 0xff,
    0x47, 0x00, 0x69, 0x01, 0xd6, 0x71, 0x12, 0x2a, 0x68, 0x02, 0x63, 0x01, 0x80, 0x70, 0x80, 0xb5,
    0x12, 0x8a, 0x68, 0xfe, 0x63, 0x0a, 0x80, 0x70, 0x80, 0xd5, 0x3f, 0x01, 0x12, 0xa2, 0x61, 0x02,
    0x80, 0x15, 0x3f, 0x01, 0x12, 0xba, 0x80, 0x15, 0x3f, 0x01, 0x12, 0xc8, 0x80, 0x15, 0x3f, 0x01,
    0x12, 0xc2, 0x60, 0x20, 0xf0, 0x18, 0x22, 0xd4, 0x8e, 0x34, 0x22, 0xd4, 0x66, 0x3e, 0x33, 0x01,
    0x66, 0x03, 0x68, 0xfe, 0x33, 0x01, 0x68, 0x02, 0x12, 0x16, 0x79, 0xff, 0x49, 0xfe, 0x69, 0xff,
    0x12, 0xc8, 0x79, 0x01, 0x49, 0x02, 0x69, 0x01, 0x60, 0x04, 0xf0, 0x18, 0x76, 0x01, 0x46, 0x40,
    0x76, 0xfe, 0x12, 0x6c, 0xa2, 0xf2, 0xfe, 0x33, 0xf2, 0x65, 0xf1, 0x29, 0x64, 0x14, 0x65, 0x02,
    0xd4, 0x55, 0x74, 0x15, 0xf2, 0x29, 0xd4, 0x55, 0x00, 0xee, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0x00, 0xff, 0x00, 0x6b, 0x20, 0x6c, 0x00,
    0xa2, 0xf6, 0xdb, 0xc4, 0x7c, 0x04, 0x3c, 0x20, 0x13, 0x02, 0x6a, 0x00, 0x6b, 0x00, 0x6c, 0x1f,
    0xa2, 0xfa, 0xda, 0xb1, 0xda, 0xc1, 0x7a, 0x08, 0x3a, 0x40, 0x13, 0x12, 0xa2, 0xf6, 0x6a, 0x00,
    0x6b, 0x20, 0xdb, 0xa1, 0x00, 0xee
]

type Chip8State = {
    videoMem: Uint8Array,
    mem: Uint8Array,
    vRegisters: Int8Array,
    I: number,
    delay: number,
    sound: number,
    pc: number,
    sp: number,
    stack: Int16Array
}

//VIEW
const PIXEL_SET_COLOR = 0xFF0000FF  //red
const PIXEL_UNSET_COLOR = 0x00FF00FF //green
const canvas = <HTMLCanvasElement> document.getElementById("screen")
const ctx = canvas.getContext("2d")
const image = ctx.createImageData(canvas.width, canvas.height)
const videoBuff = new DataView(image.data.buffer); //interface to manipulate pixels (R,G,B,A format i.e. 4 bytes or 32 bits)
//



//DRAW
// for (let i = 0; i < canvas.width * canvas.height; i++) { //TODO: remove
//     chip8.videoMem[i] = Math.round(Math.random());
// }
// //


function render(chip8: Chip8State){
    for (let i = 0, j = 0; i < chip8.videoMem.length; i++, j += 4) {
        videoBuff.setUint32(j, chip8.videoMem[i] === 1 ? PIXEL_SET_COLOR : PIXEL_UNSET_COLOR);
    }
    ctx.putImageData(image, 0, 0)
}

function execute(chip8: Chip8State){
    const instruction = rom[chip8.pc] << 8 | rom[chip8.pc+1]
    const id = instruction & 0xF000
    const addr = instruction & 0x0FFF
    const nibble = instruction & 0x000F
    const x = instruction & 0x0F00
    const y = instruction & 0x00F0
    const byte = instruction & 0x00FF
    
    switch(id){
        case 0x0000:
            switch(byte){
                case 0xE0:
                    // clear screen
                    break
                case 0xEE:
                    chip8.pc = chip8.stack[chip8.sp]
                    chip8.sp--
                    break
            }    
            break
        
        case 0x1000:
            break
        
        case 0x2000:
            chip8.sp++
            chip8.stack[chip8.sp] = chip8.pc
            chip8.pc = addr
            break

        case 0x3000:
            if(chip8.vRegisters[x] == byte) chip8.pc += 3 //TODO is it 2 or 3?
            break
        
        case 0x4000:
            if(chip8.vRegisters[x] != byte) chip8.pc += 3 //TODO is it 2 or 3?
            break
        
        case 0x5000:
            if(chip8.vRegisters[x] == chip8.vRegisters[y]) chip8.pc += 3 //TODO is it 2 or 3?
            break
        
        case 0x6000:
            chip8.vRegisters[x] = byte
            break

        case 0x7000:
            chip8.vRegisters[x] = chip8.vRegisters[x] + byte
            break
        
        case 0x8000:
            break

        case 0x9000:
            if(chip8.vRegisters[x] != chip8.vRegisters[y]) chip8.pc += 3 //TODO is it 2 or 3?
            break
        
        case 0xA000:
            chip8.I = addr
            break

        case 0xB000:
            chip8.pc = addr + chip8.vRegisters[0]
            break

        case 0xC000:
            chip8.vRegisters[x] = byte & Math.floor(Math.random() * 255)
            break
        
        case 0xD000:
            //TODO needs elaborate logic
            break

        case 0xE000:
            //TODO needs keyboard state
            break
        
        case 0xF000:

            break

        default:
            console.log("Panic, instruction not recognized!")
    }

    chip8.pc += 2
}

document.getElementById("playBtn").onclick = function(e) {
    play()
}

let rom = null
document.getElementById("romInput").onchange = function(e) {
    const file = (e.target as HTMLInputElement).files[0]
    const fr = new FileReader()
    fr.onload = () => {rom = new Uint8Array(fr.result as ArrayBuffer)}
    fr.readAsArrayBuffer(file)
}

function play(){
    rom = testRom;

    const chip8: Chip8State = {
        videoMem: new Uint8Array(canvas.width * canvas.height), //active and not active bits (0s and 1s)
        mem: new Uint8Array(4096),
        vRegisters: new Int8Array(16),
        I: 0x0000,
        delay: 0x00,
        sound: 0x00,
        pc: 0x0000,
        sp: 0x00,
        stack: new Int16Array(16)
    }
    
    for(let i = 0; i < 294; i++){
        execute(chip8)
        render(chip8)
    }
}
